=====
Usage
=====

The simplest and most common way easy-thumbnails is used is via the
``{% thumbnail %}`` Django template tag, which generates images from a model
with an ``ImageField``.

A Python class is also provided which can be used to assist generation of
thumbnail images.

Overview
========

The primary function of easy-thumbnail is to create thumbnails based on a
source image on the fly.

So whenever a thumbnail does not exist or if the source was modified
more recently than the existing thumbnail, a new thumbnail is generated (and
saved).

Image quality and format
------------------------

The default format used to save thumbnail images is a JPEG of quality 85 (out
of 100).

The thumbnail tag (and thumbnail generator) accept a ``quality`` option
which changes the image quality. The default value of 85 can also be changed
via the :ref:`THUMBNAIL_QUALITY setting <setting-thumbnail_quality>`.

Similarly, the :ref:`THUMBNAIL_EXTENSION <setting-thumbnail_extension>` and
:ref:`THUMBNAIL_TRANSPARENCY_EXTENSION
<setting-thumbnail_transparency_extension>`
settings can be used to specify an alternate image format. To preserve 
specific extensions, for instance if you always want to create lossless PNG 
thumbnails from PNG sources, you can specify these extensions using the 
:ref:`THUMBNAIL_PRESERVE_EXTENSIONS <setting-thumbnail_preserve_extensions>` 
setting. 

.. currentmodule:: easy_thumbnails.processors 

.. note:: If you want to drop the transparency layer for a specific thumbnail
          (to ensure it always uses ``THUMBNAIL_EXTENSION``) then use the
          ``replace_alpha`` option of the :func:`colorspace` processor. 

Templates
=========

To generate thumbnails in your template, use the ``{% thumbnail %}`` tag. To
make this tag available for use in your template, use::
    
    {% load thumbnail %}

.. _thumbnail_tag:

``{% thumbnail %}`` tag
-----------------------

.. autofunction:: easy_thumbnails.templatetags.thumbnail.thumbnail

Image alternatives
------------------

To take advantage of dynamic image alternatives generation use ``ThumbnailerImageField`` for your 
model image fields and specify the settings like in the example below::

   image = EasyImageField(
        upload_to=get_upload_path, 
        # reduce the original only if needed keeping aspect ratio and  highest quality
        'process_source': dict(size=(0, 1080), quality=100),
        # we use alternatives instead of original so that thumbnail/image settings 
        # such us JPEG quiality can be quickly adjusted for the whole site
        alternatives = {
            'thumbnail_small': dict(size=(100, 100), autocrop=True, crop='smart', detail=True, upscale=True), 
            'thumbnail_medium': dict(size=(160, 160), autocrop=True, crop='smart', detail=True, upscale=True), 
            'thumbnail_large': dict(size=(220,220), autocrop=True, crop='smart', detail=True, upscale=True),
            'small': dict(size=(0, 480), crop=True, upscale=True),
            'medium': dict(size=(0, 600), crop=True, upscale=True),
            'large': dict(size=(0, 720), crop=True, upscale=True),
            'all_settings_sample': dict(size=(0, 720), quality=100, autocrop=True, bw=True, crop=True, detail=True, replace_alpha='#fff', sharpen=True, upscale=True),
        }
    )
    
Then in your template you can reffer to the specified altenratives as so: 

   <a href='{{productimage.image.large.url}}'>
   <img class='product media thumbnail medium' alt='{{productimage.image.name}} - {{productimage.image.description}}' 
        src='{{productimage.image.thumbnail_medium.url}}' >
   </a>

For a full list of options, read the :doc:`ref/processors` reference
documentation.




Models
======

You can use the ``ThumbnailerField`` or ``ThumbnailerImageField`` fields (based
on ``FileField`` and ``ImageField``, respectively) for easier access to
retrieve (or generate) thumbnail images, use different storages and resize
source images before saving.

By passing a ``process_source`` and ``alternatives`` arguments to the ``ThumbnailerImageField``, you
can resize the source image on save and provide quick image alternatives in your python code or templates::

   from easy_thumbnails.fields import EasyImageField
   class Profile(models.Model):
      user = models.ForeignKey('auth.User')
      avatar = EasyImageField(
         upload_to='avatars',
         process_source=dict(size=(0, 720), quality=95, autocrop=True, bw=False, crop=True, detail=False, replace_alpha=False, sharpen=False, upscale=True),
         alternatives = {
            'small': dict(size=(100, 134), autocrop=True, crop=True, upscale=True), 
            'medium': dict(size=(160, 214), autocrop=True, crop=True, upscale=True), 
            'large': dict(size=(220, 294), autocrop=True, crop=True, upscale=True), 
        }
    )

Then you can utilize you alternatives in your python code like so::
    
   >>> Profile.objects.all()[0].avatar.large
   <ThumbnailFile: accounts/profile/image-4.jpg.220x294_q85_autocrop_crop_upscale.jpg>
   >>> ProductCategory.objects.all()[0].get_image().image.small
   <ThumbnailFile: accounts/profile/image-4.jpg.100x134_q85_autocrop_crop_upscale.jpg>

.. autoclass:: easy_thumbnails.fields.ThumbnailerField

.. autoclass:: easy_thumbnails.fields.ThumbnailerImageField


Python
======

.. currentmodule:: easy_thumbnails.files

Easy thumbnails uses a Django ``File``-like object called a
:class:`Thumbnailer` to generate thumbnail images from the source file which
it references.

``get_thumbnailer``
-------------------

The easy way to create a :class:`Thumbnailer` instance is to use the following
utility function:

.. autofunction:: get_thumbnailer
   :noindex:

Once you have an instance, you can use the :meth:`Thumbnailer.get_thumbnail`
method to retrieve a thumbnail, which will generate it if it doesn't exist (or
if the source image has been modified since it was created).

For example, assuming an ``aardvark.jpg`` image exists in the default storage::

    from easy_thumbnails.files import get_thumbnailer
    
    thumbnailer = get_thumbnailer('animals/aardvark.jpg')
    
    thumbnail_options = {'crop': True} 
    for size in (50, 100, 250):
        thumbnail_options.update({'size': (size, size)})
        thumbnailer.get_thumbnail(thumbnail_options)

Non-Django file objects
-----------------------

If you need to process a standard file-like object, use :func:`get_thumbnailer`
and provide a ``relative_name`` like this::

	picture = open('/home/zookeeper/pictures/my_anteater.jpg')
	thumbnailer = get_thumbnailer(picture, relative_name='animals/anteater.jpg')
	thumb = thumbnailer.get_thumbnail({'size': (100, 100)})

If you don't even need to save the thumbnail to storage because you are
planning on using it in some more direct way, you can use the
:meth:`Thumbnailer.generate_thumbnail` method. 

Thumbnails generated in this manor don't use any cache reference, i.e. every
call to :meth:`Thumbnailer.get_thumbnail` will generate a fresh thumbnail
image.
